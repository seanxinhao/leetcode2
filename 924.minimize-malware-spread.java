/*
 * @lc app=leetcode id=924 lang=java
 *
 * [924] Minimize Malware Spread
 */

// @lc code=start
class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        UnionFindSet ufs = new UnionFindSet(n);
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (graph[i][j] == 1) {
                    ufs.union(i, j);
                }
            }
        }
        Map<Integer, Integer> counts = new HashMap<>();
        for (int i : initial) {
            int groupNum = ufs.find(i);
            counts.put(groupNum, counts.getOrDefault(groupNum, 0) + 1);
        }
        int max = -1;
        int remove = -1;
        for (int i : initial) {
            if (counts.get(ufs.find(i)) > 1) {
                continue;
            }
            int size = ufs.getSize(i);
            if (size > max || (size == max && i < remove)) {
                max = size;
                remove = i;
            }
        }

        if (max == -1) {
            return IntStream.of(initial).min().getAsInt();
        }

        return remove;
    }

    class UnionFindSet {
        int[] parents;
        int[] sizes;

        public UnionFindSet(int n) {
            parents = new int[n];
            for (int i = 0; i < n; i++) {
                parents[i] = i;
            }
            sizes = new int[n];
            Arrays.fill(sizes, 1);
        }

        public int find(int i) {
            if (parents[i] == i) {
                return i;
            } else {
                return find(parents[i]);
            }
        }

        public void union(int a, int b) {
            int pa = find(a);
            int pb = find(b);
            if (pa != pb) {
                if (sizes[pa] < sizes[pb]) {
                    parents[pa] = pb;
                    sizes[pb] += sizes[pa];
                } else {
                    parents[pb] = pa;
                    sizes[pa] += sizes[pb];
                }
            }
        }

        public int getSize(int i) {
            int pi = find(i);
            return sizes[pi];
        }
    }
}
// @lc code=end
